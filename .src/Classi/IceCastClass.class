' Gambas class file

Public YPurl As String = "http://dir.xiph.org/yp.xml"
Private yplines As New String[]
Private alternate As Boolean = False

Static Public Function MidC(s As String, a As String, Optional b As String) As String
  'return the first occurrence of the string between a and b
  'if b is omitted then all the string starting from a is returned
  Dim mmid As String
  mMid = Mid(s, InStr(s, a) + Len(a))
  If b <> "" Then 
    Return Left(mmid, InStr(mmid, b) - 1)
      Else
    Return mMid
  Endif
End

'Fill a treeview with genres and streams; optionally use a previously cached YP file
Public Sub FillGenresTree(mytree As Treeview, Optional UseCache As Boolean = True)
  Dim mywget As Wgetclass
  Dim YPdata, YPLine As String
  Dim genres, genresu As New String[]
  Dim title, myurl, audiotype, bitrate, genre As String
  Dim i, count As Integer 
  mytree.Enabled = False
  yplines.clear
  'update YP cache
  If Not Exist(Global.YPCacheFile, True) Or UseCache = False Then

    If UseCache = True Then 
      Debug "Missing icecast cache file, downloading yellow pages now..."
    Else
      Debug "Downloading yellow pages now..."
    Endif
    
    mywget = New Wgetclass
    YPData = mywget.DownloadAsync(YPurl, False)
    Try file.Save(Global.YPCacheFile, YPData)
    If Error Then 
      message.Error(("Could not download the Yellow pages"))
      mytree.Enabled = True
      Return
    Endif
    yplines = Split(YPData, "\n")
  Else
    YPlines = Split(file.Load(Global.YPCacheFile), "\n")
  Endif
  mytree.clear
  'parse YP Cache
  'fill genres first so that we can sort quicker
  For Each ypline In yplines
     Select Case ypline
       Case Like "*<genre>*"
         genres.add(MidC(ypline, ">", "<"))
     End Select
  Next
  genres.Sort(gb.ascent + gb.Natural)
  count = 0
  For i = 0 To genres.max
    If count = 0 Then genresu.Add(genres[i])
    If genresu[genresu.max] = genres[i] Then 
      count += 1
        Else
      genresu[genresu.max] = genres[i - 1] & Chr((8)) & " [" & count & "]"
      count = 0
    Endif
  Next
  genresu[genresu.max] = genres[i - 1] & Chr((8)) & " [" & count & "]"
  For Each genre In genresu
    Try mytree.Add(Split(genre, Chr(8))[0], Replace(genre, Chr(8), ""), stock["small/directory"]) ' picture["small/folder"])
  Next
  For Each ypline In yplines
    'Try GenresTree.Add(MyLink, GenreName, picture["shoutcast16.png"]) 
    Select Case ypline
      Case Like "*<server_name>*"
        title = MidC(ypline, ">", "<")
      Case Like "*<listen_url>*"
        myurl = MidC(ypline, ">", "<")
      Case Like "*<server_type>*"
        audiotype = MidC(ypline, ">", "<")
      Case Like "*<bitrate>*"
        bitrate = MidC(ypline, ">", "<")
      Case Like "*<genre>*"
        genre = MidC(ypline, ">", "<")
      Case Like "*</entry>*"
        'add genre
        If genre <> "" Then 
          'Try mytree.Add(genre, genre, picture["shoutcast16.png"])
          'add Link
          If title <> "" And myurl <> "" Then 
            Try mytree.Add(myurl, title & " " & audiotype & " " & bitrate & "Kbps", stock["small/audio"], genre)
            title = ""
            myurl = ""
            audiotype = ""
            bitrate = ""
            genre = ""
          Endif
        Endif
    End Select
  Next 'ypline
  mytree.Enabled = True
End



Public Sub search(SearchTerm As String, MyGrid As Gridview)
  Dim ypline As String
  Dim title, myurl, audiotype, bitrate, genre As String
  Dim i As Integer 
 
  MyGrid.clear
  MyGrid.Rows.count = 0
  
  If (MyGrid <> Null) Then
    MyGrid.enabled = False
    MyGrid.Columns.count = 4
    'MyGrid.rows.count = MAXRESULTS 'max results to show ?
    MyGrid.Header = GridView.Horizontal
    MyGrid.Columns[0].text = ("Name")
    MyGrid.Columns[1].text = ("Media Type")
    MyGrid.Columns[2].text = ("BitRate")
    MyGrid.Columns[3].text = ("Link")
  Else
    message.Error("Null grid !")
    Return
  Endif


  For Each ypline In yplines
    'Try GenresTree.Add(MyLink, GenreName, picture["shoutcast16.png"]) 
    Select Case ypline
      Case Like "*<server_name>*"
        title = MidC(ypline, ">", "<")
      Case Like "*<listen_url>*"
        myurl = MidC(ypline, ">", "<")
      Case Like "*<server_type>*"
        audiotype = MidC(ypline, ">", "<")
      Case Like "*<bitrate>*"
        bitrate = MidC(ypline, ">", "<")
      Case Like "*<genre>*"
        genre = MidC(ypline, ">", "<")
      Case Like "*</entry>*"
        'add genre
        If genre <> "" Then 

          If title <> "" And myurl <> "" Then 
            If title & genre & audiotype Like "*" & searchterm & "*" Then
              MyGrid.rows.count += 1
                MyGrid[MyGrid.Rows.Max, 0].Picture = picture["filetypeuri.png"]
                MyGrid[MyGrid.Rows.Max, 0].text = title
                MyGrid[MyGrid.Rows.Max, 1].text = audiotype
                MyGrid[MyGrid.Rows.Max, 2].text = bitrate
                MyGrid[MyGrid.Rows.Max, 3].text = myurl
            Endif
           
            title = ""
            myurl = ""
            audiotype = ""
            bitrate = ""
            genre = ""
          Endif
        Endif
    End Select
  Next 'ypline
  
  
  Alternatecolor(MyGrid)
  MyGrid.enabled = True
  For i = 0 To 3
  Try MyGrid.Columns[0].w = -1
  Next 'i
  
End



Public Sub Alternatecolor(myplaylist As GridView)
 Dim r, c As Integer
 Alternate = True
     For r = 0 To myplaylist.Rows.count - 1
       If Not Alternate Then
         For c = 0 To MyPlaylist.Columns.count - 1
           MyPlaylist[r, c].text = MyPlaylist[r, c].text
           MyPlaylist[r, c].background = Global.Alternatecolor
         Next 'c
           Else
         For c = 0 To MyPlaylist.Columns.count - 1
           MyPlaylist[r, c].text = MyPlaylist[r, c].text
           MyPlaylist[r, c].background = MyPlaylist.Background
         Next 'c
       Endif
       Alternate = Not (alternate)
   Next 'r

End
